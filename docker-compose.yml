services:
  api:
    build:
      context: .
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongo-rs-init:
        condition: service_completed_successfully
    command: uv run --no-sync fastapi-solid
  postgres:
    image: postgres:18
    env_file:
      - postgres.env
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U $${POSTGRES_USER} -d postgres'"]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
  mongo:
    image: mongo:latest
    env_file:
      - mongo.env
    ports:
      - "27017:27017"
    entrypoint:
      - /bin/bash
      - -lc
      - >
        test -f /run/keyfile/mongo-keyfile
        || { echo "ERROR: keyfile not mounted at /run/keyfile/mongo-keyfile";
             ls -la /run/keyfile || true; exit 1; };
        install -D -m 400 -o mongodb -g mongodb /run/keyfile/mongo-keyfile /data/configdb/mongo-keyfile;
        exec docker-entrypoint.sh mongod --replSet rs0 --bind_ip_all --keyFile /data/configdb/mongo-keyfile --auth
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval 'db.adminCommand({ ping: 1 }).ok' | grep 1"]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_data:/data/db
      - ./secrets:/run/keyfile:ro
      - ./mongo-init/create-app-user.js:/docker-entrypoint-initdb.d/create-app-user.js:ro

  mongo-rs-init:
    image: mongo:latest
    depends_on:
      mongo:
        condition: service_healthy
    entrypoint:
      - /bin/bash
      - -lc
      - >
        mongosh --host mongo:27017 --quiet
        -u "$$MONGO_INITDB_ROOT_USERNAME" -p "$$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin --eval '
          const cfg={_id:"rs0",members:[{_id:0,host:"mongo:27017"}]};
          try{rs.initiate(cfg);}catch(e){print(e);}
          for (let i=0;i<60;i++){
            const s=rs.status();
            if(s.ok===1 && s.members && s.members.some(m=>m.stateStr==="PRIMARY")){
              print("Replica set ready"); quit(0);
            }
            sleep(1000);
          }
          print("Replica set init timeout"); quit(1);
        '
    env_file:
      - mongo.env
    restart: "no"

volumes:
  postgres_data:
  redis_data:
  mongo_data:
